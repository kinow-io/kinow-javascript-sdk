/**
 * Kinow API
 * Client API for Kinow Rest API
 *
 * OpenAPI spec version: 1.4.32
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Cart', 'model/Customer', 'model/CustomerCreateRequest', 'model/SubscriptionAccesses', 'model/Address', 'model/Carts', 'model/CustomerCurrentViews', 'model/Groups', 'model/ProductAccessInfo', 'model/ProductIDList', 'model/VideoIDList', 'model/VideoAccessInfo', 'model/Orders', 'model/Playlists', 'model/PrepaymentBalance', 'model/PrepaymentOperations', 'model/Customers', 'model/CustomerId', 'model/PaymentMethods', 'model/PaymentDetails', 'model/RegistrationFields', 'model/Token', 'model/PaymentArguments', 'model/CredentialsValidation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Cart'), require('../model/Customer'), require('../model/CustomerCreateRequest'), require('../model/SubscriptionAccesses'), require('../model/Address'), require('../model/Carts'), require('../model/CustomerCurrentViews'), require('../model/Groups'), require('../model/ProductAccessInfo'), require('../model/ProductIDList'), require('../model/VideoIDList'), require('../model/VideoAccessInfo'), require('../model/Orders'), require('../model/Playlists'), require('../model/PrepaymentBalance'), require('../model/PrepaymentOperations'), require('../model/Customers'), require('../model/CustomerId'), require('../model/PaymentMethods'), require('../model/PaymentDetails'), require('../model/RegistrationFields'), require('../model/Token'), require('../model/PaymentArguments'), require('../model/CredentialsValidation'));
  } else {
    // Browser globals (root is window)
    if (!root.KinowJavascriptSdk) {
      root.KinowJavascriptSdk = {};
    }
    root.KinowJavascriptSdk.CustomersApi = factory(root.KinowJavascriptSdk.ApiClient, root.KinowJavascriptSdk.Cart, root.KinowJavascriptSdk.Customer, root.KinowJavascriptSdk.CustomerCreateRequest, root.KinowJavascriptSdk.SubscriptionAccesses, root.KinowJavascriptSdk.Address, root.KinowJavascriptSdk.Carts, root.KinowJavascriptSdk.CustomerCurrentViews, root.KinowJavascriptSdk.Groups, root.KinowJavascriptSdk.ProductAccessInfo, root.KinowJavascriptSdk.ProductIDList, root.KinowJavascriptSdk.VideoIDList, root.KinowJavascriptSdk.VideoAccessInfo, root.KinowJavascriptSdk.Orders, root.KinowJavascriptSdk.Playlists, root.KinowJavascriptSdk.PrepaymentBalance, root.KinowJavascriptSdk.PrepaymentOperations, root.KinowJavascriptSdk.Customers, root.KinowJavascriptSdk.CustomerId, root.KinowJavascriptSdk.PaymentMethods, root.KinowJavascriptSdk.PaymentDetails, root.KinowJavascriptSdk.RegistrationFields, root.KinowJavascriptSdk.Token, root.KinowJavascriptSdk.PaymentArguments, root.KinowJavascriptSdk.CredentialsValidation);
  }
}(this, function(ApiClient, Cart, Customer, CustomerCreateRequest, SubscriptionAccesses, Address, Carts, CustomerCurrentViews, Groups, ProductAccessInfo, ProductIDList, VideoIDList, VideoAccessInfo, Orders, Playlists, PrepaymentBalance, PrepaymentOperations, Customers, CustomerId, PaymentMethods, PaymentDetails, RegistrationFields, Token, PaymentArguments, CredentialsValidation) {
  'use strict';

  /**
   * Customers service.
   * @module api/CustomersApi
   * @version 1.4.32
   */

  /**
   * Constructs a new CustomersApi. 
   * @alias module:api/CustomersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Attach cart to customer
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} cartId Cart ID to attach
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Cart} and HTTP response
     */
    this.attachCartToCustomerWithHttpInfo = function(customerId, cartId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling attachCartToCustomer");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling attachCartToCustomer");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'cart_id': cartId
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/customers/{customer_id}/carts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Attach cart to customer
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} cartId Cart ID to attach
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Cart}
     */
    this.attachCartToCustomer = function(customerId, cartId) {
      return this.attachCartToCustomerWithHttpInfo(customerId, cartId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Check authentication token
     * @param {String} token Authentication token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.checkAuthenticationTokenWithHttpInfo = function(token) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling checkAuthenticationToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'token': token
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/check-authentication-token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check authentication token
     * @param {String} token Authentication token
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.checkAuthenticationToken = function(token) {
      return this.checkAuthenticationTokenWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Check customer credentials
     * @param {String} email Email of the customer to check
     * @param {String} password Password of the customer to check
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.checkCustomerCredentialsWithHttpInfo = function(email, password) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling checkCustomerCredentials");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling checkCustomerCredentials");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'password': password
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/check-credentials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check customer credentials
     * @param {String} email Email of the customer to check
     * @param {String} password Password of the customer to check
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.checkCustomerCredentials = function(email, password) {
      return this.checkCustomerCredentialsWithHttpInfo(email, password)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Create new Customer
     * @param {module:model/CustomerCreateRequest} body Customer settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.createCustomerWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCustomer");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create new Customer
     * @param {module:model/CustomerCreateRequest} body Customer settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.createCustomer = function(body) {
      return this.createCustomerWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Link a Facebook account ID to a Customer
     * @param {Integer} customerId Customer ID
     * @param {String} facebookId Facebook ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createFacebookIdWithHttpInfo = function(customerId, facebookId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling createFacebookId");
      }

      // verify the required parameter 'facebookId' is set
      if (facebookId === undefined || facebookId === null) {
        throw new Error("Missing the required parameter 'facebookId' when calling createFacebookId");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'customer_id': customerId,
        'facebook_id': facebookId
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/facebook', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Link a Facebook account ID to a Customer
     * @param {Integer} customerId Customer ID
     * @param {String} facebookId Facebook ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createFacebookId = function(customerId, facebookId) {
      return this.createFacebookIdWithHttpInfo(customerId, facebookId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Link a Google account ID to a Customer
     * @param {Integer} customerId Customer ID
     * @param {String} googleId Google ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.createGoogleIdWithHttpInfo = function(customerId, googleId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling createGoogleId");
      }

      // verify the required parameter 'googleId' is set
      if (googleId === undefined || googleId === null) {
        throw new Error("Missing the required parameter 'googleId' when calling createGoogleId");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'customer_id': customerId,
        'google_id': googleId
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/google', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Link a Google account ID to a Customer
     * @param {Integer} customerId Customer ID
     * @param {String} googleId Google ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.createGoogleId = function(customerId, googleId) {
      return this.createGoogleIdWithHttpInfo(customerId, googleId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Delete customer
     * @param {Integer} customerId Customer ID to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteCustomerWithHttpInfo = function(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomer");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete customer
     * @param {Integer} customerId Customer ID to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteCustomer = function(customerId) {
      return this.deleteCustomerWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Create authentication token for customer.      You can use it to auto login customer using an iframe or a redirection to the user      Example url: &#x60;https://YOUR_PLATFORM.kinow.tv/?authentication_token&#x3D;AUTHENTICATION_TOKEN&#x60;
     * @param {Integer} customerId Customer ID to authenticate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.generateAuthenticationTokenWithHttpInfo = function(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling generateAuthenticationToken");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/authentication-token', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create authentication token for customer.      You can use it to auto login customer using an iframe or a redirection to the user      Example url: &#x60;https://YOUR_PLATFORM.kinow.tv/?authentication_token&#x3D;AUTHENTICATION_TOKEN&#x60;
     * @param {Integer} customerId Customer ID to authenticate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.generateAuthenticationToken = function(customerId) {
      return this.generateAuthenticationTokenWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get Customer
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.getCustomerWithHttpInfo = function(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomer");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/{customer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Customer
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.getCustomer = function(customerId) {
      return this.getCustomerWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer accesses for subscription
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.filters      &#x60;&#x60;&#x60;     type[value]&#x3D;string&amp;type[operator]&#x3D;strict&amp;cancel[value]&#x3D;string&amp;cancel[operator]&#x3D;contains     _______________      {     \&quot;type\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;strict\&quot;     },     \&quot;cancel\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;contains\&quot;     }     } &#x60;&#x60;&#x60;Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionAccesses} and HTTP response
     */
    this.getCustomerAccessesSubscriptionsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerAccessesSubscriptions");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'filters': opts['filters'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SubscriptionAccesses;

      return this.apiClient.callApi(
        '/customers/{customer_id}/accesses/subscriptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer accesses for subscription
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.filters      &#x60;&#x60;&#x60;     type[value]&#x3D;string&amp;type[operator]&#x3D;strict&amp;cancel[value]&#x3D;string&amp;cancel[operator]&#x3D;contains     _______________      {     \&quot;type\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;strict\&quot;     },     \&quot;cancel\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;contains\&quot;     }     } &#x60;&#x60;&#x60;Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionAccesses}
     */
    this.getCustomerAccessesSubscriptions = function(customerId, opts) {
      return this.getCustomerAccessesSubscriptionsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer access for videos
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SubscriptionAccesses} and HTTP response
     */
    this.getCustomerAccessesVideosWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerAccessesVideos");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = SubscriptionAccesses;

      return this.apiClient.callApi(
        '/customers/{customer_id}/accesses/videos', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer access for videos
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SubscriptionAccesses}
     */
    this.getCustomerAccessesVideos = function(customerId, opts) {
      return this.getCustomerAccessesVideosWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer address
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Address} and HTTP response
     */
    this.getCustomerAddressWithHttpInfo = function(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerAddress");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Address;

      return this.apiClient.callApi(
        '/customers/{customer_id}/address', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer address
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Address}
     */
    this.getCustomerAddress = function(customerId) {
      return this.getCustomerAddressWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Check if the customer can see this product (restriction by group)
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} productId Product ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getCustomerCanSeeProductWithHttpInfo = function(customerId, productId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerCanSeeProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getCustomerCanSeeProduct");
      }


      var pathParams = {
        'customer_id': customerId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/products/{product_id}/can-see', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Check if the customer can see this product (restriction by group)
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} productId Product ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getCustomerCanSeeProduct = function(customerId, productId) {
      return this.getCustomerCanSeeProductWithHttpInfo(customerId, productId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer carts
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.filters      &#x60;&#x60;&#x60;     date_add[value]&#x3D;string&amp;date_add[operator]&#x3D;lt     _______________      {     \&quot;date_add\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;lt\&quot;     }     } &#x60;&#x60;&#x60;     Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Carts} and HTTP response
     */
    this.getCustomerCartsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerCarts");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'filters': opts['filters'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Carts;

      return this.apiClient.callApi(
        '/customers/{customer_id}/carts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer carts
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.filters      &#x60;&#x60;&#x60;     date_add[value]&#x3D;string&amp;date_add[operator]&#x3D;lt     _______________      {     \&quot;date_add\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;lt\&quot;     }     } &#x60;&#x60;&#x60;     Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Carts}
     */
    this.getCustomerCarts = function(customerId, opts) {
      return this.getCustomerCartsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer current number of views
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerCurrentViews} and HTTP response
     */
    this.getCustomerCurrentViewsWithHttpInfo = function(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerCurrentViews");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerCurrentViews;

      return this.apiClient.callApi(
        '/customers/{customer_id}/current-views', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer current number of views
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerCurrentViews}
     */
    this.getCustomerCurrentViews = function(customerId) {
      return this.getCustomerCurrentViewsWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get groups attached to this customer
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Groups} and HTTP response
     */
    this.getCustomerGroupsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerGroups");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Groups;

      return this.apiClient.callApi(
        '/customers/{customer_id}/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get groups attached to this customer
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Groups}
     */
    this.getCustomerGroups = function(customerId, opts) {
      return this.getCustomerGroupsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer access to video
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} productId Product ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getCustomerHasAccessToProductWithHttpInfo = function(customerId, productId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerHasAccessToProduct");
      }

      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling getCustomerHasAccessToProduct");
      }


      var pathParams = {
        'customer_id': customerId,
        'product_id': productId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/products/{product_id}/has-access', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer access to video
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} productId Product ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getCustomerHasAccessToProduct = function(customerId, productId) {
      return this.getCustomerHasAccessToProductWithHttpInfo(customerId, productId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer access to Products
     * @param {Integer} customerId Customer ID to fetch
     * @param {module:model/ProductIDList} body List of Product IDs separated by comma, eg. &#39;42,21,84&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ProductAccessInfo>} and HTTP response
     */
    this.getCustomerHasAccessToProductsWithHttpInfo = function(customerId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerHasAccessToProducts");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCustomerHasAccessToProducts");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [ProductAccessInfo];

      return this.apiClient.callApi(
        '/customers/{customer_id}/products/has-access', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer access to Products
     * @param {Integer} customerId Customer ID to fetch
     * @param {module:model/ProductIDList} body List of Product IDs separated by comma, eg. &#39;42,21,84&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ProductAccessInfo>}
     */
    this.getCustomerHasAccessToProducts = function(customerId, body) {
      return this.getCustomerHasAccessToProductsWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer access to video
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} videoId Video ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.getCustomerHasAccessToVideoWithHttpInfo = function(customerId, videoId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerHasAccessToVideo");
      }

      // verify the required parameter 'videoId' is set
      if (videoId === undefined || videoId === null) {
        throw new Error("Missing the required parameter 'videoId' when calling getCustomerHasAccessToVideo");
      }


      var pathParams = {
        'customer_id': customerId,
        'video_id': videoId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/videos/{video_id}/has-access', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer access to video
     * @param {Integer} customerId Customer ID to fetch
     * @param {Integer} videoId Video ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.getCustomerHasAccessToVideo = function(customerId, videoId) {
      return this.getCustomerHasAccessToVideoWithHttpInfo(customerId, videoId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer access to Videos
     * @param {Integer} customerId Customer ID to fetch
     * @param {module:model/VideoIDList} body List of Video IDs separated by comma, eg. &#39;42,21,84&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/VideoAccessInfo>} and HTTP response
     */
    this.getCustomerHasAccessToVideosWithHttpInfo = function(customerId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerHasAccessToVideos");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getCustomerHasAccessToVideos");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [VideoAccessInfo];

      return this.apiClient.callApi(
        '/customers/{customer_id}/videos/has-access', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer access to Videos
     * @param {Integer} customerId Customer ID to fetch
     * @param {module:model/VideoIDList} body List of Video IDs separated by comma, eg. &#39;42,21,84&#39;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/VideoAccessInfo>}
     */
    this.getCustomerHasAccessToVideos = function(customerId, body) {
      return this.getCustomerHasAccessToVideosWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer orders
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Orders} and HTTP response
     */
    this.getCustomerOrdersWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerOrders");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Orders;

      return this.apiClient.callApi(
        '/customers/{customer_id}/orders', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer orders
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Orders}
     */
    this.getCustomerOrders = function(customerId, opts) {
      return this.getCustomerOrdersWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer playlists
     * @param {Integer} customerId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Playlists} and HTTP response
     */
    this.getCustomerPlaylistsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerPlaylists");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Playlists;

      return this.apiClient.callApi(
        '/customers/{customer_id}/playlists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer playlists
     * @param {Integer} customerId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Playlists}
     */
    this.getCustomerPlaylists = function(customerId, opts) {
      return this.getCustomerPlaylistsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get PrepaymentBalances list
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PrepaymentBalance>} and HTTP response
     */
    this.getCustomerPrepaymentBalancesWithHttpInfo = function(customerId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerPrepaymentBalances");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [PrepaymentBalance];

      return this.apiClient.callApi(
        '/customers/{customer_id}/prepayment-balance', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get PrepaymentBalances list
     * @param {Integer} customerId Customer ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PrepaymentBalance>}
     */
    this.getCustomerPrepaymentBalances = function(customerId) {
      return this.getCustomerPrepaymentBalancesWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get PrepaymentOperations list
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type 
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PrepaymentOperations} and HTTP response
     */
    this.getCustomerPrepaymentOperationsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerPrepaymentOperations");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'type': opts['type'],
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = PrepaymentOperations;

      return this.apiClient.callApi(
        '/customers/{customer_id}/prepayment-operations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get PrepaymentOperations list
     * @param {Integer} customerId Customer ID to fetch
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.type 
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PrepaymentOperations}
     */
    this.getCustomerPrepaymentOperations = function(customerId, opts) {
      return this.getCustomerPrepaymentOperationsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer list
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.filters      &#x60;&#x60;&#x60;     email[value]&#x3D;string&amp;email[operator]&#x3D;strict&amp;firstname[value]&#x3D;string&amp;firstname[operator]&#x3D;contains     _______________      {     \&quot;email\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;strict\&quot;     },     \&quot;firstname\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;contains\&quot;     }     } &#x60;&#x60;&#x60;Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customers} and HTTP response
     */
    this.getCustomersWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'filters': opts['filters'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customers;

      return this.apiClient.callApi(
        '/customers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer list
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.filters      &#x60;&#x60;&#x60;     email[value]&#x3D;string&amp;email[operator]&#x3D;strict&amp;firstname[value]&#x3D;string&amp;firstname[operator]&#x3D;contains     _______________      {     \&quot;email\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;strict\&quot;     },     \&quot;firstname\&quot;: {     \&quot;value\&quot;: \&quot;string\&quot;,     \&quot;operator\&quot;: \&quot;contains\&quot;     }     } &#x60;&#x60;&#x60;Operator can be: strict, contains, between, in, gt (greater than), lt (lower than).
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customers}
     */
    this.getCustomers = function(opts) {
      return this.getCustomersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get Customer ID linked to a Facebook ID
     * @param {Integer} facebookId Facebook ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerId} and HTTP response
     */
    this.getFacebookCustomerWithHttpInfo = function(facebookId) {
      var postBody = null;

      // verify the required parameter 'facebookId' is set
      if (facebookId === undefined || facebookId === null) {
        throw new Error("Missing the required parameter 'facebookId' when calling getFacebookCustomer");
      }


      var pathParams = {
        'facebook_id': facebookId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerId;

      return this.apiClient.callApi(
        '/customers/facebook/{facebook_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Customer ID linked to a Facebook ID
     * @param {Integer} facebookId Facebook ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerId}
     */
    this.getFacebookCustomer = function(facebookId) {
      return this.getFacebookCustomerWithHttpInfo(facebookId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get Customer ID linked to a Google ID
     * @param {Integer} googleId Google ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomerId} and HTTP response
     */
    this.getGoogleCustomerWithHttpInfo = function(googleId) {
      var postBody = null;

      // verify the required parameter 'googleId' is set
      if (googleId === undefined || googleId === null) {
        throw new Error("Missing the required parameter 'googleId' when calling getGoogleCustomer");
      }


      var pathParams = {
        'google_id': googleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = CustomerId;

      return this.apiClient.callApi(
        '/customers/google/{google_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Customer ID linked to a Google ID
     * @param {Integer} googleId Google ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomerId}
     */
    this.getGoogleCustomer = function(googleId) {
      return this.getGoogleCustomerWithHttpInfo(googleId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get payment methods saved for a Customer on a payment gateway
     * @param {Integer} customerId 
     * @param {String} paymentName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentMethods>} and HTTP response
     */
    this.getPaymentMethodsWithHttpInfo = function(customerId, paymentName) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getPaymentMethods");
      }

      // verify the required parameter 'paymentName' is set
      if (paymentName === undefined || paymentName === null) {
        throw new Error("Missing the required parameter 'paymentName' when calling getPaymentMethods");
      }


      var pathParams = {
        'customer_id': customerId,
        'payment_name': paymentName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [PaymentMethods];

      return this.apiClient.callApi(
        '/customers/{customer_id}/payments/{payment_name}/payment-methods', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get payment methods saved for a Customer on a payment gateway
     * @param {Integer} customerId 
     * @param {String} paymentName 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentMethods>}
     */
    this.getPaymentMethods = function(customerId, paymentName) {
      return this.getPaymentMethodsWithHttpInfo(customerId, paymentName)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get payment methods saved for a Customer on a payment gateway
     * @param {Integer} customerId 
     * @param {String} paymentName 
     * @param {String} ipAddress Filter by user IP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentMethods>} and HTTP response
     */
    this.getPaymentMethodsWithIpWithHttpInfo = function(customerId, paymentName, ipAddress) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getPaymentMethodsWithIp");
      }

      // verify the required parameter 'paymentName' is set
      if (paymentName === undefined || paymentName === null) {
        throw new Error("Missing the required parameter 'paymentName' when calling getPaymentMethodsWithIp");
      }

      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling getPaymentMethodsWithIp");
      }


      var pathParams = {
        'customer_id': customerId,
        'payment_name': paymentName,
        'ip_address': ipAddress
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [PaymentMethods];

      return this.apiClient.callApi(
        '/customers/{customer_id}/payments/{payment_name}/payment-methods/{ip_address}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get payment methods saved for a Customer on a payment gateway
     * @param {Integer} customerId 
     * @param {String} paymentName 
     * @param {String} ipAddress Filter by user IP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentMethods>}
     */
    this.getPaymentMethodsWithIp = function(customerId, paymentName, ipAddress) {
      return this.getPaymentMethodsWithIpWithHttpInfo(customerId, paymentName, ipAddress)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get pending payments for a Customer on a payment gateway
     * @param {String} paymentName 
     * @param {Integer} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentDetails>} and HTTP response
     */
    this.getPendingPaymentsWithHttpInfo = function(paymentName, customerId) {
      var postBody = null;

      // verify the required parameter 'paymentName' is set
      if (paymentName === undefined || paymentName === null) {
        throw new Error("Missing the required parameter 'paymentName' when calling getPendingPayments");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getPendingPayments");
      }


      var pathParams = {
        'payment_name': paymentName,
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [PaymentDetails];

      return this.apiClient.callApi(
        '/customers/{customer_id}/payments/{payment_name}/pending', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get pending payments for a Customer on a payment gateway
     * @param {String} paymentName 
     * @param {Integer} customerId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentDetails>}
     */
    this.getPendingPayments = function(paymentName, customerId) {
      return this.getPendingPaymentsWithHttpInfo(paymentName, customerId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get pending payments for a Customer on a payment gateway
     * @param {String} paymentName 
     * @param {Integer} customerId 
     * @param {String} ipAddress Filter by user IP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/PaymentDetails>} and HTTP response
     */
    this.getPendingPaymentsWithIpWithHttpInfo = function(paymentName, customerId, ipAddress) {
      var postBody = null;

      // verify the required parameter 'paymentName' is set
      if (paymentName === undefined || paymentName === null) {
        throw new Error("Missing the required parameter 'paymentName' when calling getPendingPaymentsWithIp");
      }

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getPendingPaymentsWithIp");
      }

      // verify the required parameter 'ipAddress' is set
      if (ipAddress === undefined || ipAddress === null) {
        throw new Error("Missing the required parameter 'ipAddress' when calling getPendingPaymentsWithIp");
      }


      var pathParams = {
        'payment_name': paymentName,
        'customer_id': customerId,
        'ip_address': ipAddress
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = [PaymentDetails];

      return this.apiClient.callApi(
        '/customers/{customer_id}/payments/{payment_name}/pending/{ip_address}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get pending payments for a Customer on a payment gateway
     * @param {String} paymentName 
     * @param {Integer} customerId 
     * @param {String} ipAddress Filter by user IP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/PaymentDetails>}
     */
    this.getPendingPaymentsWithIp = function(paymentName, customerId, ipAddress) {
      return this.getPendingPaymentsWithIpWithHttpInfo(paymentName, customerId, ipAddress)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get registration fields
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RegistrationFields} and HTTP response
     */
    this.getRegistrationFieldsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = RegistrationFields;

      return this.apiClient.callApi(
        '/customer/registration-fields', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get registration fields
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RegistrationFields}
     */
    this.getRegistrationFields = function(opts) {
      return this.getRegistrationFieldsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Create or retrieve existing Customer account using Facebook authorization token
     * @param {String} tokenType Can be &#39;oauth2&#39; or &#39;authorization&#39;
     * @param {String} token oAuth2 token or authorization code given by Facebook
     * @param {Object} opts Optional parameters
     * @param {String} opts.redirectUri Redirect URI is required if you&#39;re using authorization code method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.loginWithFacebookWithHttpInfo = function(tokenType, token, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tokenType' is set
      if (tokenType === undefined || tokenType === null) {
        throw new Error("Missing the required parameter 'tokenType' when calling loginWithFacebook");
      }

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling loginWithFacebook");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'token_type': tokenType,
        'token': token,
        'redirect_uri': opts['redirectUri']
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/facebook-login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create or retrieve existing Customer account using Facebook authorization token
     * @param {String} tokenType Can be &#39;oauth2&#39; or &#39;authorization&#39;
     * @param {String} token oAuth2 token or authorization code given by Facebook
     * @param {Object} opts Optional parameters
     * @param {String} opts.redirectUri Redirect URI is required if you&#39;re using authorization code method
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.loginWithFacebook = function(tokenType, token, opts) {
      return this.loginWithFacebookWithHttpInfo(tokenType, token, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Create or retrieve existing Customer account using Google authorization token
     * @param {String} token token given by Google
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.loginWithGoogleWithHttpInfo = function(token) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling loginWithGoogle");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'token': token
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/google-login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create or retrieve existing Customer account using Google authorization token
     * @param {String} token token given by Google
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.loginWithGoogle = function(token) {
      return this.loginWithGoogleWithHttpInfo(token)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Create temporary token to update password
     * @param {String} email Email of the Customer
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.sendNotification Send notification email (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Token} and HTTP response
     */
    this.passwordTokenWithHttpInfo = function(email, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling passwordToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'send_notification': opts['sendNotification']
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Token;

      return this.apiClient.callApi(
        '/customers/password-token', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create temporary token to update password
     * @param {String} email Email of the Customer
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.sendNotification Send notification email (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Token}
     */
    this.passwordToken = function(email, opts) {
      return this.passwordTokenWithHttpInfo(email, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Consume password token and update password
     * @param {String} token Temporary token to consume
     * @param {String} password Password to set on Customer account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.passwordTokenConsumeWithHttpInfo = function(token, password) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling passwordTokenConsume");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling passwordTokenConsume");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'token': token,
        'password': password
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/password-token-consume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Consume password token and update password
     * @param {String} token Temporary token to consume
     * @param {String} password Password to set on Customer account
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.passwordTokenConsume = function(token, password) {
      return this.passwordTokenConsumeWithHttpInfo(token, password)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Unsubcribe an Access recurring payment
     * @param {Integer} customerId Customer ID to unsubscribe
     * @param {String} productAccessId Product access ID to unsubscribe from
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.stopSubscriptionWithHttpInfo = function(customerId, productAccessId) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling stopSubscription");
      }

      // verify the required parameter 'productAccessId' is set
      if (productAccessId === undefined || productAccessId === null) {
        throw new Error("Missing the required parameter 'productAccessId' when calling stopSubscription");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'product_access_id': productAccessId
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/unsubscribe', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unsubcribe an Access recurring payment
     * @param {Integer} customerId Customer ID to unsubscribe
     * @param {String} productAccessId Product access ID to unsubscribe from
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.stopSubscription = function(customerId, productAccessId) {
      return this.stopSubscriptionWithHttpInfo(customerId, productAccessId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Update customer
     * @param {Integer} customerId Customer ID to fetch
     * @param {module:model/Customer} body Body of the customer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Customer} and HTTP response
     */
    this.updateCustomerWithHttpInfo = function(customerId, body) {
      var postBody = body;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomer");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCustomer");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/{customer_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update customer
     * @param {Integer} customerId Customer ID to fetch
     * @param {module:model/Customer} body Body of the customer
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Customer}
     */
    this.updateCustomer = function(customerId, body) {
      return this.updateCustomerWithHttpInfo(customerId, body)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Update payment method for a Customer on a payment gateway
     * @param {Integer} customerId 
     * @param {String} paymentName 
     * @param {module:model/PaymentArguments} paymentArguments Payment arguments
     * @param {Object} opts Optional parameters
     * @param {String} opts.ipAddress Filter by user IP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.updatePaymentMethodWithHttpInfo = function(customerId, paymentName, paymentArguments, opts) {
      opts = opts || {};
      var postBody = paymentArguments;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updatePaymentMethod");
      }

      // verify the required parameter 'paymentName' is set
      if (paymentName === undefined || paymentName === null) {
        throw new Error("Missing the required parameter 'paymentName' when calling updatePaymentMethod");
      }

      // verify the required parameter 'paymentArguments' is set
      if (paymentArguments === undefined || paymentArguments === null) {
        throw new Error("Missing the required parameter 'paymentArguments' when calling updatePaymentMethod");
      }


      var pathParams = {
        'customer_id': customerId,
        'payment_name': paymentName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'ip_address': opts['ipAddress']
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/payments/{payment_name}/payment-method', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update payment method for a Customer on a payment gateway
     * @param {Integer} customerId 
     * @param {String} paymentName 
     * @param {module:model/PaymentArguments} paymentArguments Payment arguments
     * @param {Object} opts Optional parameters
     * @param {String} opts.ipAddress Filter by user IP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.updatePaymentMethod = function(customerId, paymentName, paymentArguments, opts) {
      return this.updatePaymentMethodWithHttpInfo(customerId, paymentName, paymentArguments, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Validate Customer credentials
     * @param {String} email Customer email to validate
     * @param {String} password Customer password to check
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CredentialsValidation} and HTTP response
     */
    this.validateCustomerCredentialsWithHttpInfo = function(email, password) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling validateCustomerCredentials");
      }

      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling validateCustomerCredentials");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'password': password
      };

      var authNames = ['ApiClientId', 'ApiClientSecret'];
      var contentTypes = [];
      var accepts = [];
      var returnType = CredentialsValidation;

      return this.apiClient.callApi(
        '/customers/validate-credentials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Validate Customer credentials
     * @param {String} email Customer email to validate
     * @param {String} password Customer password to check
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CredentialsValidation}
     */
    this.validateCustomerCredentials = function(email, password) {
      return this.validateCustomerCredentialsWithHttpInfo(email, password)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }
  };

  return exports;
}));
