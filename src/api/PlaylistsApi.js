/**
 * Kinow API
 * Client API for Kinow back-office
 *
 * OpenAPI spec version: 1.4.4
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/PlaylistBookmark', 'model/Playlists', 'model/PlaylistBookmarkUpdate'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/PlaylistBookmark'), require('../model/Playlists'), require('../model/PlaylistBookmarkUpdate'));
  } else {
    // Browser globals (root is window)
    if (!root.KinowJavascriptSdk) {
      root.KinowJavascriptSdk = {};
    }
    root.KinowJavascriptSdk.PlaylistsApi = factory(root.KinowJavascriptSdk.ApiClient, root.KinowJavascriptSdk.PlaylistBookmark, root.KinowJavascriptSdk.Playlists, root.KinowJavascriptSdk.PlaylistBookmarkUpdate);
  }
}(this, function(ApiClient, PlaylistBookmark, Playlists, PlaylistBookmarkUpdate) {
  'use strict';

  /**
   * Playlists service.
   * @module api/PlaylistsApi
   * @version 1.4.4
   */

  /**
   * Constructs a new PlaylistsApi. 
   * @alias module:api/PlaylistsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create playlist bookmark
     * @param {Integer} customerId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PlaylistBookmark} and HTTP response
     */
    this.createPlaylistBookmarkWithHttpInfo = function(customerId, name) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling createPlaylistBookmark");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createPlaylistBookmark");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'customer_id': customerId,
        'name': name
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = PlaylistBookmark;

      return this.apiClient.callApi(
        '/playlists', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create playlist bookmark
     * @param {Integer} customerId 
     * @param {String} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PlaylistBookmark}
     */
    this.createPlaylistBookmark = function(customerId, name) {
      return this.createPlaylistBookmarkWithHttpInfo(customerId, name)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Delete playlist bookmark
     * @param {Integer} playlistId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deletePlaylistBookmarkWithHttpInfo = function(playlistId) {
      var postBody = null;

      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling deletePlaylistBookmark");
      }


      var pathParams = {
        'playlist_id': playlistId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/playlists/{playlist_id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete playlist bookmark
     * @param {Integer} playlistId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deletePlaylistBookmark = function(playlistId) {
      return this.deletePlaylistBookmarkWithHttpInfo(playlistId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get customer playlists
     * @param {Integer} customerId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Playlists} and HTTP response
     */
    this.getCustomerPlaylistsWithHttpInfo = function(customerId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerPlaylists");
      }


      var pathParams = {
        'customer_id': customerId
      };
      var queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort_by': opts['sortBy'],
        'sort_direction': opts['sortDirection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Playlists;

      return this.apiClient.callApi(
        '/customers/{customer_id}/playlists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get customer playlists
     * @param {Integer} customerId 
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.page 
     * @param {Integer} opts.perPage 
     * @param {String} opts.sortBy Sort by this attribute (id by default)
     * @param {module:model/String} opts.sortDirection Sorting direction (asc by default)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Playlists}
     */
    this.getCustomerPlaylists = function(customerId, opts) {
      return this.getCustomerPlaylistsWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Get playlist
     * @param {Integer} playlistId Playlist ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PlaylistBookmark} and HTTP response
     */
    this.getPlaylistWithHttpInfo = function(playlistId) {
      var postBody = null;

      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling getPlaylist");
      }


      var pathParams = {
        'playlist_id': playlistId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = PlaylistBookmark;

      return this.apiClient.callApi(
        '/playlists/{playlist_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get playlist
     * @param {Integer} playlistId Playlist ID to fetch
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PlaylistBookmark}
     */
    this.getPlaylist = function(playlistId) {
      return this.getPlaylistWithHttpInfo(playlistId)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }


    /**
     * Update playlist
     * @param {Integer} playlistId Playlist ID to update
     * @param {module:model/PlaylistBookmarkUpdate} body Playlist settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PlaylistBookmark} and HTTP response
     */
    this.updatePlaylistBookmarkWithHttpInfo = function(playlistId, body) {
      var postBody = body;

      // verify the required parameter 'playlistId' is set
      if (playlistId === undefined || playlistId === null) {
        throw new Error("Missing the required parameter 'playlistId' when calling updatePlaylistBookmark");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePlaylistBookmark");
      }


      var pathParams = {
        'playlist_id': playlistId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = PlaylistBookmark;

      return this.apiClient.callApi(
        '/playlists/{playlist_id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update playlist
     * @param {Integer} playlistId Playlist ID to update
     * @param {module:model/PlaylistBookmarkUpdate} body Playlist settings
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PlaylistBookmark}
     */
    this.updatePlaylistBookmark = function(playlistId, body) {
      return this.updatePlaylistBookmarkWithHttpInfo(playlistId, body)
        .then(function(response_and_data) {
          return response_and_data;
        });
    }
  };

  return exports;
}));
